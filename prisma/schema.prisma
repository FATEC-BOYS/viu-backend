generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üë§ Usu√°rios
model Usuario {
  id       String  @id @default(cuid())
  email    String  @unique
  senha    String
  nome     String
  telefone String?
  avatar   String?
  tipo     String  @default("DESIGNER") // TipoUsuario
  ativo    Boolean @default(true)

  // Timestamps
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // Relacionamentos
  projetosDesigner Projeto[]     @relation("ProjetoDesigner")
  projetosCliente  Projeto[]     @relation("ProjetoCliente")
  artes            Arte[]
  feedbacks        Feedback[]
  aprovacoes       Aprovacao[]
  tarefas          Tarefa[]
  notificacoes     Notificacao[]
  sessoes          Sessao[]

  @@index([email])
  @@index([tipo])
  @@index([ativo])
  @@index([criadoEm])
  // √çndices para performance
  @@map("usuarios")
}

// üìÅ Projetos
model Projeto {
  id        String    @id @default(cuid())
  nome      String
  descricao String?
  status    String    @default("EM_ANDAMENTO") // StatusProjeto
  orcamento Int? // Em centavos
  prazo     DateTime?

  // Relacionamentos
  designerId String
  designer   Usuario @relation("ProjetoDesigner", fields: [designerId], references: [id])
  clienteId  String
  cliente    Usuario @relation("ProjetoCliente", fields: [clienteId], references: [id])

  artes   Arte[]
  tarefas Tarefa[]

  // Timestamps
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  @@index([designerId])
  @@index([clienteId])
  @@index([status])
  @@index([criadoEm])
  @@map("projetos")
}

// üé® Artes/Arquivos
model Arte {
  id        String  @id @default(cuid())
  nome      String
  descricao String?
  arquivo   String // URL/path do arquivo
  tipo      String // TipoArte
  tamanho   Int // Em bytes
  versao    Int     @default(1)
  status    String  @default("EM_ANALISE") // StatusArte

  // Relacionamentos
  projetoId String
  projeto   Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  autorId   String
  autor     Usuario @relation(fields: [autorId], references: [id])

  feedbacks  Feedback[]
  aprovacoes Aprovacao[]

  // Timestamps
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  @@index([projetoId])
  @@index([autorId])
  @@index([status])
  @@index([tipo])
  @@index([criadoEm])
  @@map("artes")
}

// üí¨ Feedbacks
model Feedback {
  id       String  @id @default(cuid())
  conteudo String
  tipo     String  @default("TEXTO") // TipoFeedback
  arquivo  String? // Para feedback de √°udio
  posicaoX Float? // Para feedback posicional
  posicaoY Float?

  // Relacionamentos
  arteId  String
  arte    Arte    @relation(fields: [arteId], references: [id], onDelete: Cascade)
  autorId String
  autor   Usuario @relation(fields: [autorId], references: [id])

  // Timestamps
  criadoEm DateTime @default(now())

  @@index([arteId])
  @@index([autorId])
  @@index([tipo])
  @@index([criadoEm])
  @@map("feedbacks")
}

// ‚úÖ Aprova√ß√µes
model Aprovacao {
  id         String  @id @default(cuid())
  status     String  @default("PENDENTE") // StatusAprovacao
  comentario String?

  // Relacionamentos
  arteId      String
  arte        Arte    @relation(fields: [arteId], references: [id], onDelete: Cascade)
  aprovadorId String
  aprovador   Usuario @relation(fields: [aprovadorId], references: [id])

  // Timestamps
  criadoEm DateTime @default(now())

  @@index([arteId])
  @@index([aprovadorId])
  @@index([status])
  @@index([criadoEm])
  @@map("aprovacoes")
}

// üìã Tarefas
model Tarefa {
  id         String    @id @default(cuid())
  titulo     String
  descricao  String?
  status     String    @default("PENDENTE") // StatusTarefa
  prioridade String    @default("MEDIA") // Prioridade
  prazo      DateTime?

  // Relacionamentos
  projetoId     String?
  projeto       Projeto? @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  responsavelId String
  responsavel   Usuario  @relation(fields: [responsavelId], references: [id])

  // Timestamps
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  @@index([projetoId])
  @@index([responsavelId])
  @@index([status])
  @@index([prioridade])
  @@index([prazo])
  @@map("tarefas")
}

// üîî Notifica√ß√µes
model Notificacao {
  id       String  @id @default(cuid())
  titulo   String
  conteudo String
  tipo     String // TipoNotificacao
  canal    String  @default("SISTEMA") // CanalNotificacao
  lida     Boolean @default(false)

  // Relacionamentos
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  // Timestamps
  criadoEm DateTime @default(now())

  @@index([usuarioId])
  @@index([tipo])
  @@index([lida])
  @@index([criadoEm])
  @@map("notificacoes")
}

// üîê Sess√µes (para JWT/Auth)
model Sessao {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  ativo     Boolean  @default(true)

  // Relacionamentos
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  // Timestamps
  criadoEm DateTime @default(now())

  @@index([usuarioId])
  @@index([token])
  @@index([expiresAt])
  @@index([ativo])
  @@map("sessoes")
}
